V bakalářské práci, která se zabývá přesnou reprezentací reálných čísel jsme pochopili, že vše je funkce a funkcionálním paradigmatem implementovali rekurzivní čísla. Vzniklou knihovnu \texttt{tnums} je možné rozvíjet ve smyslu rozšířování funkcionality, zrychlováním výpočtů a opravou chyb.

\subsection{Souvislosti}
Rekurzivní číslo reprezentujeme jako funkci přesnosti a říkáme mu \textit{tnum}. Současná verze knihovny (\texttt{tnums.3}) je třetí implementací tnumů. Oproti implementaci pomocí řad (\texttt{tnums.1}) je tato reprezentace rychlejší. Oproti implementaci pomocí posloupností (\texttt{tnums.2}) je kód přehlednější.

Implementovali jsme 3 matematické konstanty, obousměrné převody mezi racionálními čísly a tnumy, matematické operace nad tnumy a tnumovské funkce. Operace i funkce kopírují lispovskou syntaxi matematických výrazů.

Implementace je relativně jednoduchá v tom smyslu, že velmi přesně kopíruje matematický jazyk, a tak není moc prostoru pro chyby. Také kód vypadá -- až na výjimku v podobě funkce \texttt{create-list-for-multiplication} -- velmi spořádaně a v základním rozsahu (po začátek části \ref{cast:rozhrani}) ho tvoří jen 169 řádků.

Narozdíl od knihoven představených v kapitole \ref{ssec:knihovny} vrací \texttt{tnums} čísla a nikoli vlastní datové typy. Sice se vytváří abstraktní datové struktury reprezentující čísla, ale výsledky vyčíslení jsou nativního typu \texttt{ratio}. Knihovna tedy nedegraduje na kalkulačku, ale může být přirozeně nasazena v části systému kritické na přesnost. Uživatel je odstíněn od implementace tnumů.

Knihovna toho neumí tolik jako třeba \texttt{mpmath}, naopak umí více než \texttt{computable reals}.

\subsection{Výhled}
Funkcionalita knihovny je velmi základní. Pro její rozšíření by bylo možné přidat cyklometrické funkce, další konstanty, případně funkce více proměnných či tetraci.

Dále je možné všechnu funkcionalitu určenou tnumům rozšířit pomocí funkce \texttt{num-to-tnum} i na numy a vytvořit tak přesnou kalkulačku.

Rychlost knihovny odpovídá stručnosti kódu. V kapitole \ref{ssec:optimalizace} jsou navrženy dva směry, kudy by se mohla ubírat optimalizace. V existující reprezentaci 	by se rychlost mohla zvýšit dílčím zapamatováváním proměnných, řádová změna v rychlosti výpočtů bez fundamentálního zásahu do zdrojového kódu ale možná není. Knihovna je relativně pomalá, ale její poslání je přesnost a nikoli rychlost.

\subsection{Úskalí}
Při psaní knihovny \texttt{tnums} byl dbán důraz na korektnost. I tak jsou v knihovně lokalizovány dvě chyby, první příliš omezující není, druhá je závažná.

\paragraph{Dotaz na $n$-tou číslici} Pokud řetězec končí řadou číslic $0$ nebo $9$, nemusí být tyto a jedna předcházející číslice správně. Číslo sice správně je ($2.999...=3$), ale číslice bez kontextu správně nejsou.
\begin{lisptest}{Rozvoj $\sqrt{9}$}{Číslo 3 lze zapsat jako číslo \uv{$2.999\ldots$}}
* (tnum-to-string (tnum-sqrt (num-to-tnum 9)) 50)
"2.99999999999999999999999999999999999999999999999999..."
\end{lisptest}

\paragraph{Odmocnina čísla $\leq 1$}
Knihovna vrací správně odmocniny jen čísel větších než jedna.
\begin{lisptest}{$\sqrt{1}$}{Při volání odmocniny čísla jedna se místo jedničky vrací Eulerovo číslo}
* (tnum-to-string (tnum-sqrt (num-to-tnum 1)) 50)
"2.71828182845904523536028747135266249775724709369995..."
\end{lisptest}

\subsection{Optimalizace}\label{ssec:optimalizace}
Jak jsme viděli v Tabulce \ref{tab:rychlost}, vyčíslení tnumu nemusí být dílem okamžiku, ale může trvat i velmi dlouho. Existují nejméně dva směry, kudy by se mohla ubírat optimalizace pro zrychlení výpočtů čísel s libovolnou přesností -- paralelizace a databáze.

\subsubsection{Paralelizace}
Všechen napsaný kód je sekvenční. Když vyčíslujeme \texttt{tnum-pi}, po vypočtení prvního členu se jde na další, ten se přičte a takto se to opakuje až po ukončení cyklu. Rychlejší by bylo, pokud by jeden proces byl zodpovědný pouze za sčítání řady a jednotlivé členy sčítané posloupnosti delegoval na výpočet jiným procesům. Celý výpočet by pak nemusel běžet jen v jednom procesu, na jednom jádře. To stejné platí u funkcí.

Dalším vhodným místem pro použití paralelizace je funkce \texttt{tnum+}. Ta sčítá namapovaný seznam tnumů a mapování by mohlo probíhat paralelně, jednotlivé výsledky mohou přijít v různých časech a hlavní vlákno by se staralo jen o vytvoření výsledného seznamu. Výpočet jednotlivých členů by mohl běžet pro každý člen zvlášť, ve vlastním procesu.

Další vhodné místo je funkce \texttt{create-list-for-multiplication}, která také vrací seznam. Jde o seznam čísel, která byla nezávisle na ostatních vypočtena funkcí \texttt{tnum-to-num}. Tyto výpočty mohou opět vykonávat paralelní procesy, je to tedy vhodné místo pro nasazení paralelizace.

\subsubsection{Databáze}
Druhým podstatným vylepšením by bylo vytvoření nástroje pro přístup k již vypočteným výsledkům. Při pokusu o vyčíslení tnumu dojde k dotazu na tnum a přesnost a při schodě se výsledek vrátí. Jinak se tnum vypočte, uloží a vrátí.

Otázek s tímto zlepšením je několik:
\begin{itemize}
\item{Jak ukládat tnumy?}
\item{Jak zabránit, aby nám někdo nahrával chybné výsledky?}
\item{Je morální užívat výsledků, za které zaplatil strojovým časem někdo jiný?}
\end{itemize}

Lepší by bylo, kdyby se na výpočet dalo navazovat. Pak by se nemusel každý výsledek bez záznamu počítat odznova, ale jen od nejbližší horší přesnosti.

Další problém je, jak ukládat tnumy do databáze. Mohly by to být textové řetězce.

I zde je prostor pro urychlení některých výpočtů. Například pokud bude dotaz mířit na číslo opačné k číslu, které v databázi záznam má, může se použít tento záznam a jen změnit znaménko.

Největší výzvu představuje odhalování ekvivalencí tnumů. Pokud je dotaz mířen na tnum, jehož ekvivalent již v systému máme, lze vrátit tento. Triviální je sčítání s nulou, násobení a mocnění jedničkou. Další ekvivalence tnumů už může být mnohem skrytější. Číslo $x^3$ lze napsat jako $x*x*x$. Číslo $x*3$ lze napsat jako $x+x+x$. To už nejsou tak triviální vztahy a přitom jejich souvislost může vést k mnohem rychlejším výpočtům. A že platí rovnost $4*\sum_{i\in\mathbb{N}}\frac{(-1)^i}{2i+1}=\pi=\sum_{i\in\mathbb{N}}\frac{1}{16^i}(\frac{4}{8i+1}-\frac{2}{8i+4}-\frac{1}{8i+5}-\frac{1}{8i+6})$? To už je velmi složité.

\subsection{Adekvátnost} V kapitole \ref{kap:predstava} bylo zadáno 6 podmínek, které musí abstraktní struktury splňovat. Tnumy všechny tyto podmínky dodržují:
\begin{itemize}
\item{vyčíslování tnumů zajišťuje funkce \texttt{tnum-to-num},}
\item{přesnost zajišťuje samotná podstata tnumů jako funkcí přesnosti,}
\item{matematické operace tnumy podporují,}
\item{matematické funkce tnumy podporují,}
\item{tnumy lze vracet jako výsledky funkcí,}
\item{tnumy lze použít jako argumenty funkcí.}
\end{itemize}
Tnumy tak splňují podmínky na abstraktní datové struktury. Tnumy jsou adekvátní pro realizaci přesných výpočtů s reálnými čísly.